{"version":3,"sources":["App.tsx","index.tsx","assets/idbormReactTodoIntro.png"],"names":["App","Todo","IDB","init","name","options","keyPath","objectStores","React","useState","newTodo","values","setValues","todos","setTodos","updateTodos","a","async","entries","reverse","useEffect","className","src","idbormReactTodoIntro","alt","href","value","onChange","event","target","onKeyDown","keyCode","fetch","method","body","placeholder","id","type","htmlFor","length","map","key","todo","checked","completed","onClick","get","targetTodo","put","content","delete","iterate","ReactDOM","render","document","getElementById","module","exports"],"mappings":"yQAkJeA,EApIO,WAEpB,IAGQC,EAHGC,MAAIC,KAAK,eAAgB,EAAG,CAAEC,KAAM,OAAQC,QAAS,CAAEC,QAAS,QAGvDC,aAAZN,KALkB,EAOEO,IAAMC,SAAS,CAAEC,QAAS,KAP5B,mBAOnBC,EAPmB,KAOXC,EAPW,OAQAJ,IAAMC,SAAwB,IAR9B,mBAQnBI,EARmB,KAQZC,EARY,KAUpBC,EAAc,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACIf,EAAKiB,WADT,OACZA,EADY,OAGlBJ,EAASI,EAAQC,WAHC,sCAUpB,OAJAX,IAAMY,WAAU,WACdL,OAIA,8BACE,6BAASM,UAAU,WACjB,4BAAQA,UAAU,UAChB,yBAAKC,IAAKC,IAAsBF,UAAU,QAAQG,IAAI,mBACtD,uBAAGH,UAAU,eAAb,8CAC6C,uBAAGI,KAAK,uCAAR,UAD7C,UAC6G,IAC3G,0CAFF,WAE8B,4CAF9B,qEAKA,6BACA,2BACErB,KAAK,UACLsB,MAAOf,EAAOD,QACdiB,SAAU,SAAAC,GAAK,OAAIhB,EAAU,CAAEF,QAASkB,EAAMC,OAAOH,SACrDI,UAAW,SAAMF,GAAN,SAAAZ,EAAAC,OAAA,mDASa,KAAlBW,EAAMG,UAAkBpB,EAAOD,QAT1B,kCAAAM,EAAA,MAUDgB,MAAM,WAAY,CAAEC,OAAQ,OAAQC,KAAMvB,EAAOD,WAVhD,yBAAAM,EAAA,MAYDD,KAZC,OAcPH,EAAU,CAAEF,QAAS,KAdd,sCAiBXW,UAAU,WACVc,YAAY,4BAGhB,6BAASd,UAAU,QACjB,2BAAOe,GAAG,aAAaf,UAAU,aAAagB,KAAK,aACnD,2BAAOC,QAAQ,cAAf,wBAEA,wBAAIjB,UAAU,aACXR,EAAM0B,OACH1B,EAAM2B,KAAI,mCAAEC,EAAF,KAAOC,EAAP,YACR,wBAAID,IAAKA,GACP,yBAAKpB,UAAU,QACb,2BACEA,UAAU,SACVgB,KAAK,WACLM,QAASD,EAAKE,UACdC,QAAS,0BAAA7B,EAAAC,OAAA,kEAAAD,EAAA,MAGkBf,EAAK6C,IAAIL,IAH3B,cAGDM,EAHC,kBAAA/B,EAAA,MAKDf,EAAK+C,IAAL,eAAcD,EAAd,CAA0BH,WAAYG,EAAWH,cALhD,yBAAA5B,EAAA,MAODD,KAPC,wCAWX,+BAAQ2B,EAAKO,SAEb,4BACE5B,UAAU,UACVwB,QAAS,oBAAA7B,EAAAC,OAAA,kEAAAD,EAAA,MAGDf,EAAKiD,OAAOT,IAHX,yBAAAzB,EAAA,MAKDD,KALC,6CAWjB,OAGR,4BAAQM,UAAU,UAChB,0BAAMA,UAAU,eAChB,4BACEA,UAAU,kBACVwB,QAAS,oBAAA7B,EAAAC,OAAA,kEAAAD,EAAA,MAGDf,EAAKkD,SAAQ,YAAmB,IAAD,mBAAhBV,EAAgB,KACnC,GADmC,KACzBG,UACR,OAAO3C,EAAKiD,OAAOT,OALhB,yBAAAzB,EAAA,MASDD,KATC,uCAFX,qBAmBJ,4BAAQM,UAAU,QAChB,uCACW,uBAAGI,KAAK,uCAAR,UADX,cAEE,uBAAGA,KAAK,gCAAR,sBAEF,4CACgB,uBAAGA,KAAK,sBAAR,eCtIxB2B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCLjDC,EAAOC,QAAU,IAA0B,kD","file":"static/js/main.6de156fd.chunk.js","sourcesContent":["import React from \"react\";\nimport { IDB, Entry } from \"idborm\";\n\nimport \"./App.css\";\n\n\nimport idbormReactTodoIntro from \"./assets/idbormReactTodoIntro.png\";\n\ninterface Todo {\n  id: string;\n  content: string;\n  completed: boolean;\n}\n\nconst App: React.FC = () => {\n  // Initializing dataBase and objectStore\n  const DB = IDB.init(\"TodoDataBase\", 1, { name: \"Todo\", options: { keyPath: \"id\" } });\n\n  // Destructors ObjectStore\n  const { Todo } = DB.objectStores;\n\n  const [values, setValues] = React.useState({ newTodo: \"\" });\n  const [todos, setTodos] = React.useState<Entry<Todo>[]>([]);\n\n  const updateTodos = async () => {\n    const entries = await Todo.entries();\n\n    setTodos(entries.reverse());\n  };\n\n  React.useEffect(() => {\n    updateTodos();\n  });\n\n  return (\n    <body>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <img src={idbormReactTodoIntro} className=\"intro\" alt=\"how it's works\" />\n          <p className=\"intro__text\">\n            A simple example in order to interact with <a href=\"https://tajpouria.github.io/idborm/\">idborm</a> API on{\" \"}\n            <b>Application</b> and&nbsp;<b>serviceworker</b>; obviously no body use this pattern in real world\n            applications!!\n          </p>\n          <hr />\n          <input\n            name=\"newTodo\"\n            value={values.newTodo}\n            onChange={event => setValues({ newTodo: event.target.value })}\n            onKeyDown={async event => {\n              /**\n               * Adding todo\n               *\n               * 1. Send a fake request\n               * 2. Request body received by service worker (\"src/public/serviceworker.js\") fetch lifeCycle\n               * 3. Adding request body as new todo to database\n               */\n\n              if (event.keyCode === 13 && values.newTodo) {\n                await fetch(\"ADD_TODO\", { method: \"POST\", body: values.newTodo });\n\n                await updateTodos();\n\n                setValues({ newTodo: \"\" });\n              }\n            }}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n          />\n        </header>\n        <section className=\"main\">\n          <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <ul className=\"todo-list\">\n            {todos.length\n              ? todos.map(([key, todo]) => (\n                  <li key={key as string}>\n                    <div className=\"view\">\n                      <input\n                        className=\"toggle\"\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                        onClick={async () => {\n                          // Manipulating todo\n\n                          const targetTodo = await Todo.get(key);\n\n                          await Todo.put({ ...targetTodo, completed: !targetTodo.completed });\n\n                          await updateTodos();\n                        }}\n                      />\n\n                      <label>{todo.content}</label>\n\n                      <button\n                        className=\"destroy\"\n                        onClick={async () => {\n                          // Removing todo\n\n                          await Todo.delete(key);\n\n                          await updateTodos();\n                        }}\n                      />\n                    </div>\n                  </li>\n                ))\n              : null}\n          </ul>\n        </section>\n        <footer className=\"footer\">\n          <span className=\"todo-count\"></span>\n          <button\n            className=\"clear-completed\"\n            onClick={async () => {\n              // Async iterator\n\n              await Todo.iterate(([key, value]) => {\n                if (value.completed) {\n                  return Todo.delete(key);\n                }\n              });\n\n              await updateTodos();\n            }}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n\n      <footer className=\"info\">\n        <p>\n          A simple <a href=\"https://github.com/tajpouria/idborm\">idborm</a> example by\n          <a href=\"https://github.com/tajpouria\"> Pouria Tajdivand</a>\n        </p>\n        <p>\n          Extended from <a href=\"http://todomvc.com\">TodoMVC</a>\n        </p>\n      </footer>\n    </body>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/idbormReactTodoIntro.f2ee8f19.png\";"],"sourceRoot":""}